generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employees {
  id             Int         @id @default(autoincrement())
  name           String
  phone          String      @unique @default("")
  password       String
  profession     String
  country        String
  gender         Gender
  isResume       Boolean     @default(false)
  responcesCount Int         @default(0)
  Chat           Chat[]
  Favorites      Favorites[]
  Notice         Notice[]
  resume         Resume[]
  Review         Review[]
  responces      Vacation[]  @relation("EmployeesToVacation")
}

model Notice {
  id          Int       @id @default(autoincrement())
  count       Int       @default(0)
  employeesId Int
  owner       Employees @relation(fields: [employeesId], references: [id])
  notices     Notices[]
}

model Notices {
  id         Int      @id @default(autoincrement())
  company    String
  text       String
  employerId Int
  vacationId Int
  noticeId   Int?
  createdAt  DateTime @default(now())
  employer   Employer @relation(fields: [employerId], references: [id])
  Notice     Notice?  @relation(fields: [noticeId], references: [id])
  vacation   Vacation @relation(fields: [vacationId], references: [id])
}

model Employer {
  id             Int        @id @default(autoincrement())
  name           String
  phone          String     @unique @default("")
  password       String
  vacationsCount Int        @default(0)
  Chat           Chat[]
  Notices        Notices[]
  vacations      Vacation[]
}

model Admin {
  id       Int     @id @default(autoincrement())
  name     String?
  password String
}

model Country {
  id         Int        @id @default(autoincrement())
  name       String
  count      Int        @default(0)
  categories Category[]
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String
  count      Int         @default(0)
  countryId  Int?
  Country    Country?    @relation(fields: [countryId], references: [id])
  directions Direction[]
}

model Direction {
  id            Int        @id @default(autoincrement())
  name          String
  categoryId    Int?
  vacationCount Int        @default(0)
  Category      Category?  @relation(fields: [categoryId], references: [id])
  vacations     Vacation[]
}

model Vacation {
  id             Int         @id @default(autoincrement())
  employerId     Int?
  directionId    Int?
  employeesId    Int?
  favoritesId    Int?
  description    String
  name           String
  profession     String
  salary         Int
  responcesCount Int         @default(0)
  createdAt      DateTime    @default(now())
  company        String
  contacts       String[]
  reviewsCount   Int         @default(0)
  adresse        String
  requirements   String[]
  conditions     String[]
  Notices        Notices[]
  reviews        Review[]
  direction      Direction?  @relation(fields: [directionId], references: [id])
  employer       Employer?   @relation(fields: [employerId], references: [id])
  favorites      Favorites?  @relation(fields: [favoritesId], references: [id])
  responces      Employees[] @relation("EmployeesToVacation")
}

model Review {
  id          Int       @id @default(autoincrement())
  text        String
  createdAt   DateTime  @default(now())
  employeesId Int
  vacationId  Int?
  owner       Employees @relation(fields: [employeesId], references: [id])
  Vacation    Vacation? @relation(fields: [vacationId], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  name        String
  surname     String
  bio         String
  profession  String
  contacts    String
  country     String
  links       String[]
  employeesId Int
  createdAt   DateTime  @default(now())
  owner       Employees @relation(fields: [employeesId], references: [id])
}

model Favorites {
  id          Int        @id @default(autoincrement())
  count       Int        @default(0)
  employeesId Int
  owner       Employees  @relation(fields: [employeesId], references: [id])
  vacations   Vacation[]
}

model Chat {
  id            Int       @id @default(autoincrement())
  employerId    Int
  employeesId   Int
  createdAt     DateTime  @default(now())
  messagesCount Int       @default(0)
  employee      Employees @relation(fields: [employeesId], references: [id])
  employer      Employer  @relation(fields: [employerId], references: [id])
  messages      Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  viewed    Boolean  @default(false)
  createdAt DateTime @default(now())
  chatId    Int?
  owner     Owner
  Chat      Chat?    @relation(fields: [chatId], references: [id])
}

model Otp {
  id        Int      @id @default(autoincrement())
  phone     String   @unique
  code      String
  createdAt DateTime @default(now())
}

enum Gender {
  Male
  Female
}

enum Owner {
  Employees
  Employer
}
